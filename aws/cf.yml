AWSTemplateFormatVersion: "2010-09-09"
Description: EC2 Spot Price Server
Parameters:

  EC2AMI:
    Description: AWS EC2 AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  ServerState:
    Type: String
    Description: "Running: A spot instance will launch shortly after setting this parameter; your server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues: 
    - Running
    - Stopped

  InstanceType:
    Type: String
    Description: "https://aws.amazon.com/ec2/instance-types/"
    Default: t3.medium

  SpotPrice:
    Type: String
    Description: "A t3.medium shouldn't cost much more than a cent per hour. Note: Leave this blank to use on-demand pricing."
    Default: "0.05"

  KeyPairName:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  YourIPv4:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  YourIPv6:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  HostedZoneId:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your instance starts, supply the hosted zone ID here.
    Default: ''

  RecordName:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your instance starts, supply the name of the record here (e.g. server.mydomain.com).
    Default: ''

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: Essential Configuration
        Parameters:
        - ServerState
        - InstanceType
        - SpotPrice
      - Label: 
          default: Optional Remote Access (SSH) Configuration
        Parameters:
        - KeyPairName
        - YourIPv4
        - YourIPv6
      - Label: 
          default: Optional DNS Configuration
        Parameters:
        - HostedZoneId
        - RecordName
    ParameterLabels:
      ServerState:
        default: "Update this parameter to shut down / start up your server as required to save on cost. Takes a few minutes to take effect."
      InstanceType:
        default: "Which instance type? You must make sure this is available in your region! https://aws.amazon.com/ec2/pricing/on-demand/"
      SpotPrice:
        default: "Maximum spot price per hour? Leave blank to disable spot pricing."
      KeyPairName:
        default: "If you wish to access the instance via SSH, select a Key Pair to use. https://console.aws.amazon.com/ec2/v2/home?#KeyPairs:sort=keyName"
      YourIPv4:
        default: "If you wish to access the instance via SSH and using IPv4, provide it."
      YourIPv6:
        default: "If you wish to access the instance via SSH and using IPv6, provide it."
      HostedZoneId:
        default: "If you have a hosted zone in Route 53 and wish to update a DNS record whenever your instance starts, supply the hosted zone ID here."
      RecordName:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your instance starts, supply a record name here (e.g. server.mydomain.com)."

Conditions:
  KeyPairNameProvided: !Not [ !Equals [ !Ref KeyPairName, '' ] ]
  IPv4AddressProvided: !Not [ !Equals [ !Ref YourIPv4, '' ] ]
  IPv6AddressProvided: !Not [ !Equals [ !Ref YourIPv6, '' ] ]
  DnsConfigEnabled: !And [ !Not [ !Equals [ !Ref HostedZoneId, '' ] ], !Not [ !Equals [ !Ref RecordName, '' ] ] ]
  SpotPriceProvided: !Not [ !Equals [ !Ref SpotPrice, '' ] ]

Mappings:
  ServerState:
    Running:
      DesiredCapacity: 1
    Stopped:
      DesiredCapacity: 0

Resources:

  Vpc: 
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.100.0.0/26
      EnableDnsSupport: true
      EnableDnsHostnames: true

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 0
      - !GetAZs 
        Ref: 'AWS::Region'
      CidrBlock: !Select
      - 0
      - Fn::Cidr:
        - 10.100.0.0/26
        - 4
        - 4
      VpcId: !Ref Vpc  

  SubnetARoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  SubnetBRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB  

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 1
      - !GetAZs 
        Ref: 'AWS::Region'
      CidrBlock: !Select
      - 1
      - Fn::Cidr:
        - 10.100.0.0/26
        - 4
        - 4
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc    

  Route:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  Efs:
    Type: AWS::EFS::FileSystem
    Properties: {}

  MountA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  MountB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  EfsSg:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub "${AWS::StackName}-efs"
      GroupDescription: !Sub "${AWS::StackName}-efs"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg
      VpcId: !Ref Vpc
      
  Ec2Sg:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub "${AWS::StackName}-ec2"
      GroupDescription: !Sub "${AWS::StackName}-ec2"
      SecurityGroupIngress:
      - !If
        - IPv4AddressProvided 
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIPv4}/32"
        - !Ref 'AWS::NoValue'
      - !If
        - IPv6AddressProvided 
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIpv6: !Sub "${YourIPv6}/128"
        - !Ref 'AWS::NoValue'
      - FromPort: 25565
        ToPort: 25565
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
      - FromPort: 8080
        ToPort: 8080
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
      - FromPort: 24454
        ToPort: 24454
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      VpcId: !Ref Vpc

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref EC2AMI
      InstanceType: !Ref InstanceType
      KeyName: 
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum -y install git
          git clone https://github.com/dgolbourn/percycraft.git /
          chmod +x /percycraft/aws/ec2/install.sh 
          /percycraft/aws/ec2/install.sh ${Efs}

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - MountA
    - MountB
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration
      NewInstancesProtectedFromScaleIn: false
      MaxSize: 1
      MinSize: 0
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB
    Metadata:
      LaunchEvent: !If [ DnsConfigEnabled, !GetAtt LaunchEvent.Arn, "" ]

  InstanceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref InstanceRole

  SetDNSRecordLambdaRole:
    Type: AWS::IAM::Role
    Condition: DnsConfigEnabled
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: "route53:ChangeResourceRecordSets"
                Resource: !Sub "arn:aws:route53:::hostedzone/${HostedZoneId}"
              - Effect: "Allow"
                Action: "ec2:DescribeInstance*"
                Resource: "*"

  SetDNSRecordLambda:
    Type: "AWS::Lambda::Function"
    Condition: DnsConfigEnabled
    Properties: 
      Environment:
        Variables:
          HostedZoneId: !Ref HostedZoneId
          RecordName: !Ref RecordName
      Code:
        ZipFile: |
          import boto3
          import os
          def handler(event, context):
            new_instance = boto3.resource('ec2').Instance(event['detail']['EC2InstanceId'])
            boto3.client('route53').change_resource_record_sets(
              HostedZoneId= os.environ['HostedZoneId'],
              ChangeBatch={
                  'Comment': 'updating',
                  'Changes': [
                      {
                          'Action': 'UPSERT',
                          'ResourceRecordSet': {
                              'Name': os.environ['RecordName'],
                              'Type': 'A',
                              'TTL': 60,
                              'ResourceRecords': [
                                  {
                                      'Value': new_instance.public_ip_address
                                  },
                              ]
                          }
                      },
                  ]
              })
      Description: Sets Route 53 DNS Record
      FunctionName: !Sub "${AWS::StackName}-set-dns"
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt SetDNSRecordLambdaRole.Arn
      Runtime: python3.7
      Timeout: 20

  LaunchEvent:
    Type: AWS::Events::Rule
    Condition: DnsConfigEnabled
    Properties: 
      EventPattern:
        source:
        - aws.autoscaling
        detail-type:
        - EC2 Instance Launch Successful
        detail:
          AutoScalingGroupName:
          - !Sub "${AWS::StackName}-asg"
      Name: !Sub "${AWS::StackName}-instance-launch"
      State: ENABLED
      Targets:
        - Arn: !GetAtt SetDNSRecordLambda.Arn
          Id: !Sub "${AWS::StackName}-set-dns"

  LaunchEventLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: DnsConfigEnabled
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SetDNSRecordLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LaunchEvent.Arn

Outputs:
  CheckInstanceIp:
    Description: To find the instance IP address, click the following link
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/v2/home?region=${AWS::Region}#Instances:tag:aws:autoscaling:groupName=${AutoScalingGroup};sort=tag:Name"
